@tailwind base;
@tailwind components;

.btn{
  @apply px-5 py-2 rounded
}

@tailwind utilities;

/* =====================================
ABOUT MY USE OF CSS GRID AND TAILWINDCSS 
===================================== */

/* 

I enjoy using TailwindCSS with .vue files because it gives an immediacy to the code. I don't have to reference another file to see what's happening at the presentation layer.

With Tailwind, that association is very close. However, I also want to use CSS Grid for layout. To keep things clear, I'll set some ground rules.

1. /css/main.css is only for truly global classes that can't be applied in Tailwind for some reason (for example, background gradients).
2. All component CSS is defined in the component's .vue file, including any CSS Grids.

*/

/* =====================================
TYPOGRAPHY
===================================== */

html,
.root {
  font-size: 18px;
  line-height: 23px;
}

body,
.article {
  font-family: sans-serif;
  font-family: sans-serif;
  font-size: 1em;
  line-height: 1.27777778em;
}
h1,
.h1 {
  font-size: 4.22222222em;
  line-height: 1.21052632em;
  margin-top: 0.30263158em;
  margin-bottom: 0.60526316em;
}
h2,
.h2 {
  font-size: 2.61111111em;
  line-height: 1.46808511em;
  margin-top: 0.4893617em;
  margin-bottom: 0.4893617em;
}
h3,
.h3 {
  font-size: 1.61111111em;
  line-height: 1.5862069em;
  margin-top: 0.79310345em;
  margin-bottom: 0em;
}
h4,
.h4 {
  font-size: 1em;
  font-weight: bold;
  line-height: 1.27777778em;
  margin-top: 1.27777778em;
  margin-bottom: 0em;
}
h5,
.h5 {
  font-size: 1em;
  line-height: 1.27777778em;
  margin-top: 1.27777778em;
  margin-bottom: 0em;
}
p,
ul,
ol,
pre,
table,
blockquote {
  margin-top: 0em;
  margin-bottom: 1.27777778em;
}
ul ul,
ol ol,
ul ol,
ol ul {
  margin-top: 0em;
  margin-bottom: 0em;
}

/* Let's make sure all's aligned */
hr,
.hr {
  border: 1px solid;
  margin: -1px 0;
}
a,
b,
i,
strong,
em,
small,
code {
  line-height: 0;
}
sub,
sup {
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}
sup {
  top: -0.5em;
}
sub {
  bottom: -0.25em;
}

/* =====================================
TRANSISTIONS AND TRANSFORMATIONS
===================================== */

.skew {
  transform: skewX(-30deg);
}

.skew-reset {
  transform: skewX(30deg);
}

.reverse-skew {
  transform: skewX(30deg);
}

.reverse-skew-reset {
  transform: skewX(-30deg);
}

.flip-h {
  transform: rotateX(180deg);
}

.slide-enter-active, .slide-leave-active {
  transition: all .75s cubic-bezier(.4,.01,.76,.67);
  max-height: 230px;
}

.slide-enter, .slide-leave-to {
  overflow: hidden;
  max-height: 0;
  margin: 0;
  padding: 0;
  opacity: 0;
}

.expand-enter-active,
.expand-leave-active {
  transition: height 1s ease-in-out;
  overflow: hidden;
}

.expand-enter,
.expand-leave-to {
  height: 0;
}